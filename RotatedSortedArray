Given a sorted array of integers A of size N and an integer B.

array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value B to search. If found in the array, return its index otherwise, return -1.

You may assume no duplicate exists in the array.

NOTE: Users are expected to solve this in O(log(N)) time.

Example Input
Input 1:

A = [4, 5, 6, 7, 0, 1, 2, 3]
B = 4 
Input 2:

A = [1]
B = 1


Example Output
Output 1:

 0 
Output 2:

 0

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int search(final int[] A, int B) {
        int n=A.length;
        
        if(n==1)
        {
            if (A[0]==B)
            return 0;
            else
            return -1;
        }
        else
        {
            int ans=0;

        int k=findRotations(A);
        
        if(k==0)
        {
            ans = binarySearch(A,0,n-1,B);
        }
         else if(B>=A[0])
       {
            ans=binarySearch(A,0,k-1,B); 
       }
       else{

         ans=binarySearch(A,k,n-1,B);

       }
       return ans;
        }

        
    }
  
  public int findRotations(int[] A)
  {
    
    int low=0;
    int ans=0;
    int high=A.length-1;
   
    while(low<=high)
    {
      int mid= (low+high)/2;

        if(A[0]<=A[mid])
        {
            low=mid+1;

        }
        else
        {
            ans=mid;
            high=mid-1;
        }
    }
    //System.out.println(ans);
    return ans;
  }

  public int binarySearch(int[] A,int low, int high,int search)
  { 
     while(low<=high)
     {
         int mid=(low+high)/2;
         if(A[mid]==search)
         {
             return mid;
         }
     else if(A[mid]<search)
      {
          low=mid+1;
      }
      else{
          high=mid-1;
      }


     }
     return -1;

  }
     
}
